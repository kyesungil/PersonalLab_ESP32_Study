[1/9] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Esp32_vs_code\uart_echo\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.1.2-2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Esp32_vs_code/uart_echo/build/bootloader/bootloader.bin"
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/7] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/uart_echo_example_main.c.obj
[3/7] Linking C static library esp-idf\main\libmain.a
[4/7] Generating ld/sections.ld
[5/7] Linking CXX executable uart_echo.elf
[6/7] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Esp32_vs_code/uart_echo/build/uart_echo.bin
[7/7] cmd.exe /C "cd /D C:\Esp32_vs_code\uart_echo\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.1.2-2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Esp32_vs_code/uart_echo/build/partition_table/partition-table.bin C:/Esp32_vs_code/uart_echo/build/uart_echo.bin"
uart_echo.bin binary size 0x30150 bytes. Smallest app partition is 0x100000 bytes. 0xcfeb0 bytes (81%) free.
